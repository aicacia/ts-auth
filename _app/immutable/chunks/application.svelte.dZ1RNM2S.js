import{e as m,u as f,g as p,b as r,d as c}from"./runtime.XTayOKyQ.js";import{p as s}from"./proxy.BKNo-OHe.js";import{g as d}from"./entry.BP_E8CG1.js";import{b as u}from"./paths.BeVl75iW.js";import{p as o}from"./index.Xid77Hwu.js";import{l as g,a as v}from"./api.svelte.DzjM_Kp1.js";import{a as A}from"./index.B-XEKY0d.js";import{t as h}from"./token.svelte.1tKc01KO.js";const a=g("applicationId",null);let l=c(null),i=c(null);m(()=>{f(()=>{var t;a.value&&((t=p(i))==null?void 0:t.id)!==a.value&&v.connected&&h.validToken&&(p(l)||r(l,s(A.getApplicationById(a.value).then(e=>{r(i,s(e))}).finally(()=>{r(l,null)}))))})});const S={get id(){return a.value},get current(){return p(i)}};async function U(t){r(i,s(t)),a.value=t.id;const e=`${u}/applications/${o.params.applicationId}`;if(o.url.pathname.startsWith(e)){const n=new URL(o.url);n.pathname=n.pathname.replace(e,`${u}/applications/${t.id}`),await d(n,{invalidateAll:!0})}}export{S as a,U as s};
