/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TokenRequestPassword
 */
export interface TokenRequestPassword {
    /**
     * 
     * @type {string}
     * @memberof TokenRequestPassword
     */
    grantType: TokenRequestPasswordGrantTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TokenRequestPassword
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof TokenRequestPassword
     */
    scope?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TokenRequestPassword
     */
    username: string;
}


/**
 * @export
 */
export const TokenRequestPasswordGrantTypeEnum = {
    Password: 'password'
} as const;
export type TokenRequestPasswordGrantTypeEnum = typeof TokenRequestPasswordGrantTypeEnum[keyof typeof TokenRequestPasswordGrantTypeEnum];


/**
 * Check if a given object implements the TokenRequestPassword interface.
 */
export function instanceOfTokenRequestPassword(value: object): value is TokenRequestPassword {
    if (!('grantType' in value) || value['grantType'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    return true;
}

export function TokenRequestPasswordFromJSON(json: any): TokenRequestPassword {
    return TokenRequestPasswordFromJSONTyped(json, false);
}

export function TokenRequestPasswordFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenRequestPassword {
    if (json == null) {
        return json;
    }
    return {
        
        'grantType': json['grant_type'],
        'password': json['password'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'username': json['username'],
    };
}

export function TokenRequestPasswordToJSON(json: any): TokenRequestPassword {
    return TokenRequestPasswordToJSONTyped(json, false);
}

export function TokenRequestPasswordToJSONTyped(value?: TokenRequestPassword | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'grant_type': value['grantType'],
        'password': value['password'],
        'scope': value['scope'],
        'username': value['username'],
    };
}

