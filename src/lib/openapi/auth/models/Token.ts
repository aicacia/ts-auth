/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    accessToken: string;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    expiresIn: number;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    idToken?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Token
     */
    issuedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    issuedTokenType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    refreshToken?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    refreshTokenExpiresIn?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    scope?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    tokenType: string;
}

/**
 * Check if a given object implements the Token interface.
 */
export function instanceOfToken(value: object): value is Token {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('expiresIn' in value) || value['expiresIn'] === undefined) return false;
    if (!('issuedAt' in value) || value['issuedAt'] === undefined) return false;
    if (!('tokenType' in value) || value['tokenType'] === undefined) return false;
    return true;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'],
        'expiresIn': json['expires_in'],
        'idToken': json['id_token'] == null ? undefined : json['id_token'],
        'issuedAt': (new Date(json['issued_at'])),
        'issuedTokenType': json['issued_token_type'] == null ? undefined : json['issued_token_type'],
        'refreshToken': json['refresh_token'] == null ? undefined : json['refresh_token'],
        'refreshTokenExpiresIn': json['refresh_token_expires_in'] == null ? undefined : json['refresh_token_expires_in'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'tokenType': json['token_type'],
    };
}

export function TokenToJSON(json: any): Token {
    return TokenToJSONTyped(json, false);
}

export function TokenToJSONTyped(value?: Token | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_token': value['accessToken'],
        'expires_in': value['expiresIn'],
        'id_token': value['idToken'],
        'issued_at': ((value['issuedAt']).toISOString()),
        'issued_token_type': value['issuedTokenType'],
        'refresh_token': value['refreshToken'],
        'refresh_token_expires_in': value['refreshTokenExpiresIn'],
        'scope': value['scope'],
        'token_type': value['tokenType'],
    };
}

