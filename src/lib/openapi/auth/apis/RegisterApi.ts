/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage,
  RegisterUser,
  Token,
} from '../models/index';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    RegisterUserFromJSON,
    RegisterUserToJSON,
    TokenFromJSON,
    TokenToJSON,
} from '../models/index';

export interface RegisterUserRequest {
    registerUser: RegisterUser;
}

/**
 * RegisterApi - interface
 * 
 * @export
 * @interface RegisterApiInterface
 */
export interface RegisterApiInterface {
    /**
     * 
     * @param {RegisterUser} registerUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     */
    registerUser(registerUser: RegisterUser, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

}

/**
 * 
 */
export class RegisterApi extends runtime.BaseAPI implements RegisterApiInterface {

    /**
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['registerUser'] == null) {
            throw new runtime.RequiredError(
                'registerUser',
                'Required parameter "registerUser" was null or undefined when calling registerUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Tenant-ID"] = await this.configuration.apiKey("Tenant-ID"); // TenantUUID authentication
        }

        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserToJSON(requestParameters['registerUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     */
    async registerUser(registerUser: RegisterUser, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.registerUserRaw({ registerUser: registerUser }, initOverrides);
        return await response.value();
    }

}
