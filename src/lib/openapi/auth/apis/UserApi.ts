/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUser,
  ErrorMessage,
  ServiceAccountCreateUserEmail,
  ServiceAccountCreateUserPhoneNumber,
  ServiceAccountUpdateUserEmail,
  ServiceAccountUpdateUserPhoneNumber,
  Token,
  UpdateUser,
  UpdateUserInfoRequest,
  User,
  UserEmail,
  UserInfo,
  UserPagination,
  UserPhoneNumber,
  UserResetPassword,
} from '../models/index';
import {
    CreateUserFromJSON,
    CreateUserToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    ServiceAccountCreateUserEmailFromJSON,
    ServiceAccountCreateUserEmailToJSON,
    ServiceAccountCreateUserPhoneNumberFromJSON,
    ServiceAccountCreateUserPhoneNumberToJSON,
    ServiceAccountUpdateUserEmailFromJSON,
    ServiceAccountUpdateUserEmailToJSON,
    ServiceAccountUpdateUserPhoneNumberFromJSON,
    ServiceAccountUpdateUserPhoneNumberToJSON,
    TokenFromJSON,
    TokenToJSON,
    UpdateUserFromJSON,
    UpdateUserToJSON,
    UpdateUserInfoRequestFromJSON,
    UpdateUserInfoRequestToJSON,
    UserFromJSON,
    UserToJSON,
    UserEmailFromJSON,
    UserEmailToJSON,
    UserInfoFromJSON,
    UserInfoToJSON,
    UserPaginationFromJSON,
    UserPaginationToJSON,
    UserPhoneNumberFromJSON,
    UserPhoneNumberToJSON,
    UserResetPasswordFromJSON,
    UserResetPasswordToJSON,
} from '../models/index';

export interface AllUsersRequest {
    offset?: number | null;
    limit?: number | null;
    applicationId?: number | null;
}

export interface CreateUserRequest {
    createUser: CreateUser;
    applicationId?: number | null;
}

export interface CreateUserEmailRequest {
    userId: number;
    serviceAccountCreateUserEmail: ServiceAccountCreateUserEmail;
    applicationId?: number | null;
}

export interface CreateUserPhoneNumberRequest {
    userId: number;
    serviceAccountCreateUserPhoneNumber: ServiceAccountCreateUserPhoneNumber;
    applicationId?: number | null;
}

export interface CreateUserResetPasswordTokenRequest {
    userId: number;
    userResetPassword: UserResetPassword;
    applicationId?: number | null;
}

export interface DeleteUserRequest {
    userId: number;
    applicationId?: number | null;
}

export interface DeleteUserEmailRequest {
    userId: number;
    emailId: number;
    applicationId?: number | null;
}

export interface DeleteUserPhoneNumberRequest {
    userId: number;
    phoneNumberId: number;
    applicationId?: number | null;
}

export interface GetUserByIdRequest {
    userId: number;
    applicationId?: number | null;
}

export interface UpdateUserRequest {
    userId: number;
    updateUser: UpdateUser;
    applicationId?: number | null;
}

export interface UpdateUserEmailRequest {
    userId: number;
    emailId: number;
    serviceAccountUpdateUserEmail: ServiceAccountUpdateUserEmail;
    applicationId?: number | null;
}

export interface UpdateUserInfoOperationRequest {
    userId: number;
    updateUserInfoRequest: UpdateUserInfoRequest;
    applicationId?: number | null;
}

export interface UpdateUserPhoneNumberRequest {
    userId: number;
    phoneNumberId: number;
    serviceAccountUpdateUserPhoneNumber: ServiceAccountUpdateUserPhoneNumber;
    applicationId?: number | null;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    allUsersRaw(requestParameters: AllUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPagination>>;

    /**
     */
    allUsers(offset?: number | null, limit?: number | null, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPagination>;

    /**
     * 
     * @param {CreateUser} createUser 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     */
    createUser(createUser: CreateUser, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * 
     * @param {number} userId User id
     * @param {ServiceAccountCreateUserEmail} serviceAccountCreateUserEmail 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createUserEmailRaw(requestParameters: CreateUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEmail>>;

    /**
     */
    createUserEmail(userId: number, serviceAccountCreateUserEmail: ServiceAccountCreateUserEmail, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEmail>;

    /**
     * 
     * @param {number} userId User id
     * @param {ServiceAccountCreateUserPhoneNumber} serviceAccountCreateUserPhoneNumber 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createUserPhoneNumberRaw(requestParameters: CreateUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPhoneNumber>>;

    /**
     */
    createUserPhoneNumber(userId: number, serviceAccountCreateUserPhoneNumber: ServiceAccountCreateUserPhoneNumber, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPhoneNumber>;

    /**
     * 
     * @param {number} userId User id
     * @param {UserResetPassword} userResetPassword 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createUserResetPasswordTokenRaw(requestParameters: CreateUserResetPasswordTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     */
    createUserResetPasswordToken(userId: number, userResetPassword: UserResetPassword, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

    /**
     * 
     * @param {number} userId User id
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteUser(userId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} userId User id
     * @param {number} emailId Email id
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteUserEmailRaw(requestParameters: DeleteUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteUserEmail(userId: number, emailId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} userId User id
     * @param {number} phoneNumberId PhoneNumber id
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteUserPhoneNumberRaw(requestParameters: DeleteUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteUserPhoneNumber(userId: number, phoneNumberId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} userId User id
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     */
    getUserById(userId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * 
     * @param {number} userId 
     * @param {UpdateUser} updateUser 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     */
    updateUser(userId: number, updateUser: UpdateUser, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * 
     * @param {number} userId User id
     * @param {number} emailId Email id
     * @param {ServiceAccountUpdateUserEmail} serviceAccountUpdateUserEmail 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateUserEmailRaw(requestParameters: UpdateUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEmail>>;

    /**
     */
    updateUserEmail(userId: number, emailId: number, serviceAccountUpdateUserEmail: ServiceAccountUpdateUserEmail, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEmail>;

    /**
     * 
     * @param {number} userId 
     * @param {UpdateUserInfoRequest} updateUserInfoRequest 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateUserInfoRaw(requestParameters: UpdateUserInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>>;

    /**
     */
    updateUserInfo(userId: number, updateUserInfoRequest: UpdateUserInfoRequest, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo>;

    /**
     * 
     * @param {number} userId User id
     * @param {number} phoneNumberId PhoneNumber id
     * @param {ServiceAccountUpdateUserPhoneNumber} serviceAccountUpdateUserPhoneNumber 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateUserPhoneNumberRaw(requestParameters: UpdateUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPhoneNumber>>;

    /**
     */
    updateUserPhoneNumber(userId: number, phoneNumberId: number, serviceAccountUpdateUserPhoneNumber: ServiceAccountUpdateUserPhoneNumber, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPhoneNumber>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     */
    async allUsersRaw(requestParameters: AllUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPagination>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPaginationFromJSON(jsonValue));
    }

    /**
     */
    async allUsers(offset?: number | null, limit?: number | null, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPagination> {
        const response = await this.allUsersRaw({ offset: offset, limit: limit, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['createUser'] == null) {
            throw new runtime.RequiredError(
                'createUser',
                'Required parameter "createUser" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserToJSON(requestParameters['createUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async createUser(createUser: CreateUser, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserRaw({ createUser: createUser, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserEmailRaw(requestParameters: CreateUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEmail>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createUserEmail().'
            );
        }

        if (requestParameters['serviceAccountCreateUserEmail'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountCreateUserEmail',
                'Required parameter "serviceAccountCreateUserEmail" was null or undefined when calling createUserEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}/emails`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountCreateUserEmailToJSON(requestParameters['serviceAccountCreateUserEmail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEmailFromJSON(jsonValue));
    }

    /**
     */
    async createUserEmail(userId: number, serviceAccountCreateUserEmail: ServiceAccountCreateUserEmail, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEmail> {
        const response = await this.createUserEmailRaw({ userId: userId, serviceAccountCreateUserEmail: serviceAccountCreateUserEmail, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserPhoneNumberRaw(requestParameters: CreateUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPhoneNumber>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createUserPhoneNumber().'
            );
        }

        if (requestParameters['serviceAccountCreateUserPhoneNumber'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountCreateUserPhoneNumber',
                'Required parameter "serviceAccountCreateUserPhoneNumber" was null or undefined when calling createUserPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}/phone_numbers`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountCreateUserPhoneNumberToJSON(requestParameters['serviceAccountCreateUserPhoneNumber']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPhoneNumberFromJSON(jsonValue));
    }

    /**
     */
    async createUserPhoneNumber(userId: number, serviceAccountCreateUserPhoneNumber: ServiceAccountCreateUserPhoneNumber, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPhoneNumber> {
        const response = await this.createUserPhoneNumberRaw({ userId: userId, serviceAccountCreateUserPhoneNumber: serviceAccountCreateUserPhoneNumber, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserResetPasswordTokenRaw(requestParameters: CreateUserResetPasswordTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createUserResetPasswordToken().'
            );
        }

        if (requestParameters['userResetPassword'] == null) {
            throw new runtime.RequiredError(
                'userResetPassword',
                'Required parameter "userResetPassword" was null or undefined when calling createUserResetPasswordToken().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}/reset-password`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserResetPasswordToJSON(requestParameters['userResetPassword']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     */
    async createUserResetPasswordToken(userId: number, userResetPassword: UserResetPassword, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.createUserResetPasswordTokenRaw({ userId: userId, userResetPassword: userResetPassword, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUser(userId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw({ userId: userId, applicationId: applicationId }, initOverrides);
    }

    /**
     */
    async deleteUserEmailRaw(requestParameters: DeleteUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUserEmail().'
            );
        }

        if (requestParameters['emailId'] == null) {
            throw new runtime.RequiredError(
                'emailId',
                'Required parameter "emailId" was null or undefined when calling deleteUserEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}/emails/{email_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"email_id"}}`, encodeURIComponent(String(requestParameters['emailId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserEmail(userId: number, emailId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserEmailRaw({ userId: userId, emailId: emailId, applicationId: applicationId }, initOverrides);
    }

    /**
     */
    async deleteUserPhoneNumberRaw(requestParameters: DeleteUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUserPhoneNumber().'
            );
        }

        if (requestParameters['phoneNumberId'] == null) {
            throw new runtime.RequiredError(
                'phoneNumberId',
                'Required parameter "phoneNumberId" was null or undefined when calling deleteUserPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}/phone-numbers/{phone_number_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"phone_number_id"}}`, encodeURIComponent(String(requestParameters['phoneNumberId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserPhoneNumber(userId: number, phoneNumberId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserPhoneNumberRaw({ userId: userId, phoneNumberId: phoneNumberId, applicationId: applicationId }, initOverrides);
    }

    /**
     */
    async getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async getUserById(userId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserByIdRaw({ userId: userId, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUser().'
            );
        }

        if (requestParameters['updateUser'] == null) {
            throw new runtime.RequiredError(
                'updateUser',
                'Required parameter "updateUser" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserToJSON(requestParameters['updateUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async updateUser(userId: number, updateUser: UpdateUser, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.updateUserRaw({ userId: userId, updateUser: updateUser, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserEmailRaw(requestParameters: UpdateUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEmail>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUserEmail().'
            );
        }

        if (requestParameters['emailId'] == null) {
            throw new runtime.RequiredError(
                'emailId',
                'Required parameter "emailId" was null or undefined when calling updateUserEmail().'
            );
        }

        if (requestParameters['serviceAccountUpdateUserEmail'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountUpdateUserEmail',
                'Required parameter "serviceAccountUpdateUserEmail" was null or undefined when calling updateUserEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}/emails/{email_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"email_id"}}`, encodeURIComponent(String(requestParameters['emailId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountUpdateUserEmailToJSON(requestParameters['serviceAccountUpdateUserEmail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEmailFromJSON(jsonValue));
    }

    /**
     */
    async updateUserEmail(userId: number, emailId: number, serviceAccountUpdateUserEmail: ServiceAccountUpdateUserEmail, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEmail> {
        const response = await this.updateUserEmailRaw({ userId: userId, emailId: emailId, serviceAccountUpdateUserEmail: serviceAccountUpdateUserEmail, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserInfoRaw(requestParameters: UpdateUserInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUserInfo().'
            );
        }

        if (requestParameters['updateUserInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserInfoRequest',
                'Required parameter "updateUserInfoRequest" was null or undefined when calling updateUserInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}/info`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserInfoRequestToJSON(requestParameters['updateUserInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     */
    async updateUserInfo(userId: number, updateUserInfoRequest: UpdateUserInfoRequest, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.updateUserInfoRaw({ userId: userId, updateUserInfoRequest: updateUserInfoRequest, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserPhoneNumberRaw(requestParameters: UpdateUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPhoneNumber>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUserPhoneNumber().'
            );
        }

        if (requestParameters['phoneNumberId'] == null) {
            throw new runtime.RequiredError(
                'phoneNumberId',
                'Required parameter "phoneNumberId" was null or undefined when calling updateUserPhoneNumber().'
            );
        }

        if (requestParameters['serviceAccountUpdateUserPhoneNumber'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountUpdateUserPhoneNumber',
                'Required parameter "serviceAccountUpdateUserPhoneNumber" was null or undefined when calling updateUserPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{user_id}/phone-numbers/{phone_number_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"phone_number_id"}}`, encodeURIComponent(String(requestParameters['phoneNumberId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountUpdateUserPhoneNumberToJSON(requestParameters['serviceAccountUpdateUserPhoneNumber']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPhoneNumberFromJSON(jsonValue));
    }

    /**
     */
    async updateUserPhoneNumber(userId: number, phoneNumberId: number, serviceAccountUpdateUserPhoneNumber: ServiceAccountUpdateUserPhoneNumber, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPhoneNumber> {
        const response = await this.updateUserPhoneNumberRaw({ userId: userId, phoneNumberId: phoneNumberId, serviceAccountUpdateUserPhoneNumber: serviceAccountUpdateUserPhoneNumber, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

}
