/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTOTPRequest,
  CreateUserEmail,
  CreateUserPhoneNumber,
  ErrorMessage,
  ResetPasswordRequest,
  UpdateUser,
  UpdateUserConfigRequest,
  UpdateUserInfoRequest,
  User,
  UserEmail,
  UserPhoneNumber,
  UserTOTP,
} from '../models/index';
import {
    CreateTOTPRequestFromJSON,
    CreateTOTPRequestToJSON,
    CreateUserEmailFromJSON,
    CreateUserEmailToJSON,
    CreateUserPhoneNumberFromJSON,
    CreateUserPhoneNumberToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    UpdateUserFromJSON,
    UpdateUserToJSON,
    UpdateUserConfigRequestFromJSON,
    UpdateUserConfigRequestToJSON,
    UpdateUserInfoRequestFromJSON,
    UpdateUserInfoRequestToJSON,
    UserFromJSON,
    UserToJSON,
    UserEmailFromJSON,
    UserEmailToJSON,
    UserPhoneNumberFromJSON,
    UserPhoneNumberToJSON,
    UserTOTPFromJSON,
    UserTOTPToJSON,
} from '../models/index';

export interface CreateCurrentUserAddOauth2ProviderUrlRequest {
    provider: string;
    state?: string | null;
}

export interface CreateCurrentUserEmailRequest {
    createUserEmail: CreateUserEmail;
}

export interface CreateCurrentUserPhoneNumberRequest {
    createUserPhoneNumber: CreateUserPhoneNumber;
}

export interface CreateCurrentUserTotpRequest {
    createTOTPRequest: CreateTOTPRequest;
}

export interface DeleteCurrentUserEmailRequest {
    emailId: number;
}

export interface DeleteCurrentUserPhoneNumberRequest {
    phoneNumberId: number;
}

export interface ResetCurrentUserPasswordRequest {
    resetPasswordRequest: ResetPasswordRequest;
}

export interface SetCurrentUserEmailAsPrimaryRequest {
    emailId: number;
}

export interface SetCurrentUserPhoneNumberAsPrimaryRequest {
    phoneNumberId: number;
}

export interface UpdateCurrentUserRequest {
    updateUser: UpdateUser;
}

export interface UpdateCurrentUserConfigRequest {
    updateUserConfigRequest: UpdateUserConfigRequest;
}

export interface UpdateCurrentUserInfoRequest {
    updateUserInfoRequest: UpdateUserInfoRequest;
}

/**
 * CurrentUserApi - interface
 * 
 * @export
 * @interface CurrentUserApiInterface
 */
export interface CurrentUserApiInterface {
    /**
     * 
     * @param {string} provider OAuth2 provider
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    createCurrentUserAddOauth2ProviderUrlRaw(requestParameters: CreateCurrentUserAddOauth2ProviderUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    createCurrentUserAddOauth2ProviderUrl(provider: string, state?: string | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {CreateUserEmail} createUserEmail 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    createCurrentUserEmailRaw(requestParameters: CreateCurrentUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEmail>>;

    /**
     */
    createCurrentUserEmail(createUserEmail: CreateUserEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEmail>;

    /**
     * 
     * @param {CreateUserPhoneNumber} createUserPhoneNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    createCurrentUserPhoneNumberRaw(requestParameters: CreateCurrentUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPhoneNumber>>;

    /**
     */
    createCurrentUserPhoneNumber(createUserPhoneNumber: CreateUserPhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPhoneNumber>;

    /**
     * 
     * @param {CreateTOTPRequest} createTOTPRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    createCurrentUserTotpRaw(requestParameters: CreateCurrentUserTotpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserTOTP>>;

    /**
     */
    createCurrentUserTotp(createTOTPRequest: CreateTOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserTOTP>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    deactivateCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deactivateCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} emailId Email ID to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    deleteCurrentUserEmailRaw(requestParameters: DeleteCurrentUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteCurrentUserEmail(emailId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} phoneNumberId PhoneNumber ID to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    deleteCurrentUserPhoneNumberRaw(requestParameters: DeleteCurrentUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteCurrentUserPhoneNumber(phoneNumberId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    deleteCurrentUserTotpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteCurrentUserTotp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     */
    getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * 
     * @param {ResetPasswordRequest} resetPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    resetCurrentUserPasswordRaw(requestParameters: ResetCurrentUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    resetCurrentUserPassword(resetPasswordRequest: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} emailId Email ID to set as primary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    setCurrentUserEmailAsPrimaryRaw(requestParameters: SetCurrentUserEmailAsPrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    setCurrentUserEmailAsPrimary(emailId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} phoneNumberId PhoneNumber ID to set as primary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    setCurrentUserPhoneNumberAsPrimaryRaw(requestParameters: SetCurrentUserPhoneNumberAsPrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    setCurrentUserPhoneNumberAsPrimary(phoneNumberId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {UpdateUser} updateUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    updateCurrentUserRaw(requestParameters: UpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    updateCurrentUser(updateUser: UpdateUser, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {UpdateUserConfigRequest} updateUserConfigRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    updateCurrentUserConfigRaw(requestParameters: UpdateCurrentUserConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    updateCurrentUserConfig(updateUserConfigRequest: UpdateUserConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {UpdateUserInfoRequest} updateUserInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrentUserApiInterface
     */
    updateCurrentUserInfoRaw(requestParameters: UpdateCurrentUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    updateCurrentUserInfo(updateUserInfoRequest: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class CurrentUserApi extends runtime.BaseAPI implements CurrentUserApiInterface {

    /**
     */
    async createCurrentUserAddOauth2ProviderUrlRaw(requestParameters: CreateCurrentUserAddOauth2ProviderUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling createCurrentUserAddOauth2ProviderUrl().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/oauth2/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createCurrentUserAddOauth2ProviderUrl(provider: string, state?: string | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createCurrentUserAddOauth2ProviderUrlRaw({ provider: provider, state: state }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createCurrentUserEmailRaw(requestParameters: CreateCurrentUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserEmail>> {
        if (requestParameters['createUserEmail'] == null) {
            throw new runtime.RequiredError(
                'createUserEmail',
                'Required parameter "createUserEmail" was null or undefined when calling createCurrentUserEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/emails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserEmailToJSON(requestParameters['createUserEmail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEmailFromJSON(jsonValue));
    }

    /**
     */
    async createCurrentUserEmail(createUserEmail: CreateUserEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserEmail> {
        const response = await this.createCurrentUserEmailRaw({ createUserEmail: createUserEmail }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createCurrentUserPhoneNumberRaw(requestParameters: CreateCurrentUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPhoneNumber>> {
        if (requestParameters['createUserPhoneNumber'] == null) {
            throw new runtime.RequiredError(
                'createUserPhoneNumber',
                'Required parameter "createUserPhoneNumber" was null or undefined when calling createCurrentUserPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/phone-numbers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserPhoneNumberToJSON(requestParameters['createUserPhoneNumber']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPhoneNumberFromJSON(jsonValue));
    }

    /**
     */
    async createCurrentUserPhoneNumber(createUserPhoneNumber: CreateUserPhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPhoneNumber> {
        const response = await this.createCurrentUserPhoneNumberRaw({ createUserPhoneNumber: createUserPhoneNumber }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createCurrentUserTotpRaw(requestParameters: CreateCurrentUserTotpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserTOTP>> {
        if (requestParameters['createTOTPRequest'] == null) {
            throw new runtime.RequiredError(
                'createTOTPRequest',
                'Required parameter "createTOTPRequest" was null or undefined when calling createCurrentUserTotp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/totp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTOTPRequestToJSON(requestParameters['createTOTPRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserTOTPFromJSON(jsonValue));
    }

    /**
     */
    async createCurrentUserTotp(createTOTPRequest: CreateTOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserTOTP> {
        const response = await this.createCurrentUserTotpRaw({ createTOTPRequest: createTOTPRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deactivateCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deactivateCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deactivateCurrentUserRaw(initOverrides);
    }

    /**
     */
    async deleteCurrentUserEmailRaw(requestParameters: DeleteCurrentUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['emailId'] == null) {
            throw new runtime.RequiredError(
                'emailId',
                'Required parameter "emailId" was null or undefined when calling deleteCurrentUserEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/emails/{email_id}`.replace(`{${"email_id"}}`, encodeURIComponent(String(requestParameters['emailId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCurrentUserEmail(emailId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrentUserEmailRaw({ emailId: emailId }, initOverrides);
    }

    /**
     */
    async deleteCurrentUserPhoneNumberRaw(requestParameters: DeleteCurrentUserPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['phoneNumberId'] == null) {
            throw new runtime.RequiredError(
                'phoneNumberId',
                'Required parameter "phoneNumberId" was null or undefined when calling deleteCurrentUserPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/phone-numbers/{phone_number_id}`.replace(`{${"phone_number_id"}}`, encodeURIComponent(String(requestParameters['phoneNumberId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCurrentUserPhoneNumber(phoneNumberId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrentUserPhoneNumberRaw({ phoneNumberId: phoneNumberId }, initOverrides);
    }

    /**
     */
    async deleteCurrentUserTotpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/totp`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCurrentUserTotp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrentUserTotpRaw(initOverrides);
    }

    /**
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async resetCurrentUserPasswordRaw(requestParameters: ResetCurrentUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resetPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'resetPasswordRequest',
                'Required parameter "resetPasswordRequest" was null or undefined when calling resetCurrentUserPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters['resetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resetCurrentUserPassword(resetPasswordRequest: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetCurrentUserPasswordRaw({ resetPasswordRequest: resetPasswordRequest }, initOverrides);
    }

    /**
     */
    async setCurrentUserEmailAsPrimaryRaw(requestParameters: SetCurrentUserEmailAsPrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['emailId'] == null) {
            throw new runtime.RequiredError(
                'emailId',
                'Required parameter "emailId" was null or undefined when calling setCurrentUserEmailAsPrimary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/emails/{email_id}/set-as-primary`.replace(`{${"email_id"}}`, encodeURIComponent(String(requestParameters['emailId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setCurrentUserEmailAsPrimary(emailId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setCurrentUserEmailAsPrimaryRaw({ emailId: emailId }, initOverrides);
    }

    /**
     */
    async setCurrentUserPhoneNumberAsPrimaryRaw(requestParameters: SetCurrentUserPhoneNumberAsPrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['phoneNumberId'] == null) {
            throw new runtime.RequiredError(
                'phoneNumberId',
                'Required parameter "phoneNumberId" was null or undefined when calling setCurrentUserPhoneNumberAsPrimary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/phone-numbers/{phone_number_id}/set-as-primary`.replace(`{${"phone_number_id"}}`, encodeURIComponent(String(requestParameters['phoneNumberId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setCurrentUserPhoneNumberAsPrimary(phoneNumberId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setCurrentUserPhoneNumberAsPrimaryRaw({ phoneNumberId: phoneNumberId }, initOverrides);
    }

    /**
     */
    async updateCurrentUserRaw(requestParameters: UpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateUser'] == null) {
            throw new runtime.RequiredError(
                'updateUser',
                'Required parameter "updateUser" was null or undefined when calling updateCurrentUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserToJSON(requestParameters['updateUser']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCurrentUser(updateUser: UpdateUser, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCurrentUserRaw({ updateUser: updateUser }, initOverrides);
    }

    /**
     */
    async updateCurrentUserConfigRaw(requestParameters: UpdateCurrentUserConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateUserConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserConfigRequest',
                'Required parameter "updateUserConfigRequest" was null or undefined when calling updateCurrentUserConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserConfigRequestToJSON(requestParameters['updateUserConfigRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCurrentUserConfig(updateUserConfigRequest: UpdateUserConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCurrentUserConfigRaw({ updateUserConfigRequest: updateUserConfigRequest }, initOverrides);
    }

    /**
     */
    async updateCurrentUserInfoRaw(requestParameters: UpdateCurrentUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateUserInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserInfoRequest',
                'Required parameter "updateUserInfoRequest" was null or undefined when calling updateCurrentUserInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/current-user/info`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserInfoRequestToJSON(requestParameters['updateUserInfoRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCurrentUserInfo(updateUserInfoRequest: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCurrentUserInfoRaw({ updateUserInfoRequest: updateUserInfoRequest }, initOverrides);
    }

}
