/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage,
} from '../models/index';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
} from '../models/index';

export interface CreateOauth2UrlRequest {
    provider: string;
    register?: boolean | null;
    state?: string | null;
}

export interface Oauth2CallbackRequest {
    provider: string;
    state: string;
    code: string;
    scope?: string | null;
}

/**
 * Oauth2Api - interface
 * 
 * @export
 * @interface Oauth2ApiInterface
 */
export interface Oauth2ApiInterface {
    /**
     * 
     * @param {string} provider OAuth2 provider
     * @param {boolean} [register] 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    createOauth2UrlRaw(requestParameters: CreateOauth2UrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    createOauth2Url(provider: string, register?: boolean | null, state?: string | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {string} provider OAuth2 provider
     * @param {string} state 
     * @param {string} code 
     * @param {string} [scope] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    oauth2CallbackRaw(requestParameters: Oauth2CallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    oauth2Callback(provider: string, state: string, code: string, scope?: string | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class Oauth2Api extends runtime.BaseAPI implements Oauth2ApiInterface {

    /**
     */
    async createOauth2UrlRaw(requestParameters: CreateOauth2UrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling createOauth2Url().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['register'] != null) {
            queryParameters['register'] = requestParameters['register'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Tenant-ID"] = await this.configuration.apiKey("Tenant-ID"); // TenantUUID authentication
        }

        const response = await this.request({
            path: `/oauth2/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createOauth2Url(provider: string, register?: boolean | null, state?: string | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createOauth2UrlRaw({ provider: provider, register: register, state: state }, initOverrides);
        return await response.value();
    }

    /**
     */
    async oauth2CallbackRaw(requestParameters: Oauth2CallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oauth2Callback().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling oauth2Callback().'
            );
        }

        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling oauth2Callback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth2/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async oauth2Callback(provider: string, state: string, code: string, scope?: string | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauth2CallbackRaw({ provider: provider, state: state, code: code, scope: scope }, initOverrides);
    }

}
