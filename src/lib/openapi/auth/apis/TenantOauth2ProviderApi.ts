/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTenantOAuth2Provider,
  ErrorMessage,
  TenantOAuth2Provider,
  UpdateTenantOAuth2Provider,
} from '../models/index';
import {
    CreateTenantOAuth2ProviderFromJSON,
    CreateTenantOAuth2ProviderToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    TenantOAuth2ProviderFromJSON,
    TenantOAuth2ProviderToJSON,
    UpdateTenantOAuth2ProviderFromJSON,
    UpdateTenantOAuth2ProviderToJSON,
} from '../models/index';

export interface CreateTenantOauth2ProviderRequest {
    tenantId: number;
    createTenantOAuth2Provider: CreateTenantOAuth2Provider;
    applicationId?: number | null;
}

export interface DeleteTenantOauth2ProviderRequest {
    tenantId: number;
    tenantOauht2ProviderId: number;
    applicationId?: number | null;
}

export interface UpdateTenantOauth2ProviderRequest {
    tenantId: number;
    tenantOauht2ProviderId: number;
    updateTenantOAuth2Provider: UpdateTenantOAuth2Provider;
    applicationId?: number | null;
}

/**
 * TenantOauth2ProviderApi - interface
 * 
 * @export
 * @interface TenantOauth2ProviderApiInterface
 */
export interface TenantOauth2ProviderApiInterface {
    /**
     * 
     * @param {number} tenantId Tenant ID
     * @param {CreateTenantOAuth2Provider} createTenantOAuth2Provider 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantOauth2ProviderApiInterface
     */
    createTenantOauth2ProviderRaw(requestParameters: CreateTenantOauth2ProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantOAuth2Provider>>;

    /**
     */
    createTenantOauth2Provider(tenantId: number, createTenantOAuth2Provider: CreateTenantOAuth2Provider, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantOAuth2Provider>;

    /**
     * 
     * @param {number} tenantId Tenant ID
     * @param {number} tenantOauht2ProviderId OAuth2 Provider ID
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantOauth2ProviderApiInterface
     */
    deleteTenantOauth2ProviderRaw(requestParameters: DeleteTenantOauth2ProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteTenantOauth2Provider(tenantId: number, tenantOauht2ProviderId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} tenantId Tenant ID
     * @param {number} tenantOauht2ProviderId OAuth2 Provider ID
     * @param {UpdateTenantOAuth2Provider} updateTenantOAuth2Provider 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantOauth2ProviderApiInterface
     */
    updateTenantOauth2ProviderRaw(requestParameters: UpdateTenantOauth2ProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantOAuth2Provider>>;

    /**
     */
    updateTenantOauth2Provider(tenantId: number, tenantOauht2ProviderId: number, updateTenantOAuth2Provider: UpdateTenantOAuth2Provider, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantOAuth2Provider>;

}

/**
 * 
 */
export class TenantOauth2ProviderApi extends runtime.BaseAPI implements TenantOauth2ProviderApiInterface {

    /**
     */
    async createTenantOauth2ProviderRaw(requestParameters: CreateTenantOauth2ProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantOAuth2Provider>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling createTenantOauth2Provider().'
            );
        }

        if (requestParameters['createTenantOAuth2Provider'] == null) {
            throw new runtime.RequiredError(
                'createTenantOAuth2Provider',
                'Required parameter "createTenantOAuth2Provider" was null or undefined when calling createTenantOauth2Provider().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenants/{tenant_id}/oauth2-providers`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTenantOAuth2ProviderToJSON(requestParameters['createTenantOAuth2Provider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantOAuth2ProviderFromJSON(jsonValue));
    }

    /**
     */
    async createTenantOauth2Provider(tenantId: number, createTenantOAuth2Provider: CreateTenantOAuth2Provider, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantOAuth2Provider> {
        const response = await this.createTenantOauth2ProviderRaw({ tenantId: tenantId, createTenantOAuth2Provider: createTenantOAuth2Provider, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTenantOauth2ProviderRaw(requestParameters: DeleteTenantOauth2ProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteTenantOauth2Provider().'
            );
        }

        if (requestParameters['tenantOauht2ProviderId'] == null) {
            throw new runtime.RequiredError(
                'tenantOauht2ProviderId',
                'Required parameter "tenantOauht2ProviderId" was null or undefined when calling deleteTenantOauth2Provider().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenants/{tenant_id}/oauth2-providers/{tenant_oauht2_provider_id}`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"tenant_oauht2_provider_id"}}`, encodeURIComponent(String(requestParameters['tenantOauht2ProviderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTenantOauth2Provider(tenantId: number, tenantOauht2ProviderId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTenantOauth2ProviderRaw({ tenantId: tenantId, tenantOauht2ProviderId: tenantOauht2ProviderId, applicationId: applicationId }, initOverrides);
    }

    /**
     */
    async updateTenantOauth2ProviderRaw(requestParameters: UpdateTenantOauth2ProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantOAuth2Provider>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateTenantOauth2Provider().'
            );
        }

        if (requestParameters['tenantOauht2ProviderId'] == null) {
            throw new runtime.RequiredError(
                'tenantOauht2ProviderId',
                'Required parameter "tenantOauht2ProviderId" was null or undefined when calling updateTenantOauth2Provider().'
            );
        }

        if (requestParameters['updateTenantOAuth2Provider'] == null) {
            throw new runtime.RequiredError(
                'updateTenantOAuth2Provider',
                'Required parameter "updateTenantOAuth2Provider" was null or undefined when calling updateTenantOauth2Provider().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenants/{tenant_id}/oauth2-providers/{tenant_oauht2_provider_id}`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"tenant_oauht2_provider_id"}}`, encodeURIComponent(String(requestParameters['tenantOauht2ProviderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenantOAuth2ProviderToJSON(requestParameters['updateTenantOAuth2Provider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantOAuth2ProviderFromJSON(jsonValue));
    }

    /**
     */
    async updateTenantOauth2Provider(tenantId: number, tenantOauht2ProviderId: number, updateTenantOAuth2Provider: UpdateTenantOAuth2Provider, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantOAuth2Provider> {
        const response = await this.updateTenantOauth2ProviderRaw({ tenantId: tenantId, tenantOauht2ProviderId: tenantOauht2ProviderId, updateTenantOAuth2Provider: updateTenantOAuth2Provider, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

}
