/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTenant,
  ErrorMessage,
  Tenant,
  TenantPagination,
  UpdateTenant,
} from '../models/index';
import {
    CreateTenantFromJSON,
    CreateTenantToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    TenantFromJSON,
    TenantToJSON,
    TenantPaginationFromJSON,
    TenantPaginationToJSON,
    UpdateTenantFromJSON,
    UpdateTenantToJSON,
} from '../models/index';

export interface AllTenantsRequest {
    offset?: number | null;
    limit?: number | null;
    showPrivateKey?: boolean | null;
    applicationId?: number | null;
}

export interface CreateTenantRequest {
    createTenant: CreateTenant;
    applicationId?: number | null;
}

export interface DeleteTenantRequest {
    tenantId: number;
    applicationId?: number | null;
}

export interface GetTenantByIdRequest {
    tenantId: number;
    showPrivateKey?: boolean | null;
    applicationId?: number | null;
}

export interface UpdateTenantRequest {
    tenantId: number;
    updateTenant: UpdateTenant;
    applicationId?: number | null;
}

/**
 * TenantApi - interface
 * 
 * @export
 * @interface TenantApiInterface
 */
export interface TenantApiInterface {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {boolean} [showPrivateKey] 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApiInterface
     */
    allTenantsRaw(requestParameters: AllTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantPagination>>;

    /**
     */
    allTenants(offset?: number | null, limit?: number | null, showPrivateKey?: boolean | null, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantPagination>;

    /**
     * 
     * @param {CreateTenant} createTenant 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApiInterface
     */
    createTenantRaw(requestParameters: CreateTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>>;

    /**
     */
    createTenant(createTenant: CreateTenant, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant>;

    /**
     * 
     * @param {number} tenantId Tenant ID
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApiInterface
     */
    deleteTenantRaw(requestParameters: DeleteTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteTenant(tenantId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} tenantId Tenant ID
     * @param {boolean} [showPrivateKey] 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApiInterface
     */
    getTenantByIdRaw(requestParameters: GetTenantByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>>;

    /**
     */
    getTenantById(tenantId: number, showPrivateKey?: boolean | null, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant>;

    /**
     * 
     * @param {number} tenantId Tenant ID
     * @param {UpdateTenant} updateTenant 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApiInterface
     */
    updateTenantRaw(requestParameters: UpdateTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>>;

    /**
     */
    updateTenant(tenantId: number, updateTenant: UpdateTenant, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant>;

}

/**
 * 
 */
export class TenantApi extends runtime.BaseAPI implements TenantApiInterface {

    /**
     */
    async allTenantsRaw(requestParameters: AllTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantPagination>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['showPrivateKey'] != null) {
            queryParameters['show_private_key'] = requestParameters['showPrivateKey'];
        }

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantPaginationFromJSON(jsonValue));
    }

    /**
     */
    async allTenants(offset?: number | null, limit?: number | null, showPrivateKey?: boolean | null, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantPagination> {
        const response = await this.allTenantsRaw({ offset: offset, limit: limit, showPrivateKey: showPrivateKey, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createTenantRaw(requestParameters: CreateTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters['createTenant'] == null) {
            throw new runtime.RequiredError(
                'createTenant',
                'Required parameter "createTenant" was null or undefined when calling createTenant().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTenantToJSON(requestParameters['createTenant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     */
    async createTenant(createTenant: CreateTenant, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.createTenantRaw({ createTenant: createTenant, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTenantRaw(requestParameters: DeleteTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteTenant().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenants/{tenant_id}`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTenant(tenantId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTenantRaw({ tenantId: tenantId, applicationId: applicationId }, initOverrides);
    }

    /**
     */
    async getTenantByIdRaw(requestParameters: GetTenantByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getTenantById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['showPrivateKey'] != null) {
            queryParameters['show_private_key'] = requestParameters['showPrivateKey'];
        }

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenants/{tenant_id}`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     */
    async getTenantById(tenantId: number, showPrivateKey?: boolean | null, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.getTenantByIdRaw({ tenantId: tenantId, showPrivateKey: showPrivateKey, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTenantRaw(requestParameters: UpdateTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateTenant().'
            );
        }

        if (requestParameters['updateTenant'] == null) {
            throw new runtime.RequiredError(
                'updateTenant',
                'Required parameter "updateTenant" was null or undefined when calling updateTenant().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenants/{tenant_id}`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenantToJSON(requestParameters['updateTenant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     */
    async updateTenant(tenantId: number, updateTenant: UpdateTenant, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.updateTenantRaw({ tenantId: tenantId, updateTenant: updateTenant, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

}
