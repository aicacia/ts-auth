/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateServiceAccount,
  ErrorMessage,
  ServiceAccount,
  ServiceAccountPagination,
  UpdateServiceAccount,
} from '../models/index';
import {
    CreateServiceAccountFromJSON,
    CreateServiceAccountToJSON,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    ServiceAccountFromJSON,
    ServiceAccountToJSON,
    ServiceAccountPaginationFromJSON,
    ServiceAccountPaginationToJSON,
    UpdateServiceAccountFromJSON,
    UpdateServiceAccountToJSON,
} from '../models/index';

export interface AllServiceAccountsRequest {
    offset?: number | null;
    limit?: number | null;
    applicationId?: number | null;
}

export interface CreateServiceAccountRequest {
    createServiceAccount: CreateServiceAccount;
    applicationId?: number | null;
}

export interface DeleteServiceAccountRequest {
    serviceAccountId: number;
    applicationId?: number | null;
}

export interface GetServiceAccountByIdRequest {
    serviceAccountId: number;
    applicationId?: number | null;
}

export interface UpdateServiceAccountRequest {
    serviceAccountId: number;
    updateServiceAccount: UpdateServiceAccount;
    applicationId?: number | null;
}

/**
 * ServiceAccountApi - interface
 * 
 * @export
 * @interface ServiceAccountApiInterface
 */
export interface ServiceAccountApiInterface {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountApiInterface
     */
    allServiceAccountsRaw(requestParameters: AllServiceAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccountPagination>>;

    /**
     */
    allServiceAccounts(offset?: number | null, limit?: number | null, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccountPagination>;

    /**
     * 
     * @param {CreateServiceAccount} createServiceAccount 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountApiInterface
     */
    createServiceAccountRaw(requestParameters: CreateServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccount>>;

    /**
     */
    createServiceAccount(createServiceAccount: CreateServiceAccount, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccount>;

    /**
     * 
     * @param {number} serviceAccountId ServiceAccount ID
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountApiInterface
     */
    deleteServiceAccountRaw(requestParameters: DeleteServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteServiceAccount(serviceAccountId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} serviceAccountId ServiceAccount ID
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountApiInterface
     */
    getServiceAccountByIdRaw(requestParameters: GetServiceAccountByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccount>>;

    /**
     */
    getServiceAccountById(serviceAccountId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccount>;

    /**
     * 
     * @param {number} serviceAccountId ServiceAccount ID
     * @param {UpdateServiceAccount} updateServiceAccount 
     * @param {number} [applicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountApiInterface
     */
    updateServiceAccountRaw(requestParameters: UpdateServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccount>>;

    /**
     */
    updateServiceAccount(serviceAccountId: number, updateServiceAccount: UpdateServiceAccount, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccount>;

}

/**
 * 
 */
export class ServiceAccountApi extends runtime.BaseAPI implements ServiceAccountApiInterface {

    /**
     */
    async allServiceAccountsRaw(requestParameters: AllServiceAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccountPagination>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/service-accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountPaginationFromJSON(jsonValue));
    }

    /**
     */
    async allServiceAccounts(offset?: number | null, limit?: number | null, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccountPagination> {
        const response = await this.allServiceAccountsRaw({ offset: offset, limit: limit, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createServiceAccountRaw(requestParameters: CreateServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccount>> {
        if (requestParameters['createServiceAccount'] == null) {
            throw new runtime.RequiredError(
                'createServiceAccount',
                'Required parameter "createServiceAccount" was null or undefined when calling createServiceAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/service-accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateServiceAccountToJSON(requestParameters['createServiceAccount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountFromJSON(jsonValue));
    }

    /**
     */
    async createServiceAccount(createServiceAccount: CreateServiceAccount, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccount> {
        const response = await this.createServiceAccountRaw({ createServiceAccount: createServiceAccount, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteServiceAccountRaw(requestParameters: DeleteServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling deleteServiceAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/service-accounts/{service_account_id}`.replace(`{${"service_account_id"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteServiceAccount(serviceAccountId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteServiceAccountRaw({ serviceAccountId: serviceAccountId, applicationId: applicationId }, initOverrides);
    }

    /**
     */
    async getServiceAccountByIdRaw(requestParameters: GetServiceAccountByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccount>> {
        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling getServiceAccountById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/service-accounts/{service_account_id}`.replace(`{${"service_account_id"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountFromJSON(jsonValue));
    }

    /**
     */
    async getServiceAccountById(serviceAccountId: number, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccount> {
        const response = await this.getServiceAccountByIdRaw({ serviceAccountId: serviceAccountId, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateServiceAccountRaw(requestParameters: UpdateServiceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccount>> {
        if (requestParameters['serviceAccountId'] == null) {
            throw new runtime.RequiredError(
                'serviceAccountId',
                'Required parameter "serviceAccountId" was null or undefined when calling updateServiceAccount().'
            );
        }

        if (requestParameters['updateServiceAccount'] == null) {
            throw new runtime.RequiredError(
                'updateServiceAccount',
                'Required parameter "updateServiceAccount" was null or undefined when calling updateServiceAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['application_id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/service-accounts/{service_account_id}`.replace(`{${"service_account_id"}}`, encodeURIComponent(String(requestParameters['serviceAccountId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateServiceAccountToJSON(requestParameters['updateServiceAccount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountFromJSON(jsonValue));
    }

    /**
     */
    async updateServiceAccount(serviceAccountId: number, updateServiceAccount: UpdateServiceAccount, applicationId?: number | null, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccount> {
        const response = await this.updateServiceAccountRaw({ serviceAccountId: serviceAccountId, updateServiceAccount: updateServiceAccount, applicationId: applicationId }, initOverrides);
        return await response.value();
    }

}
