/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage,
  MFARequest,
  Token,
} from '../models/index';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    MFARequestFromJSON,
    MFARequestToJSON,
    TokenFromJSON,
    TokenToJSON,
} from '../models/index';

export interface MfaRequest {
    mFARequest: MFARequest;
}

/**
 * MfaApi - interface
 * 
 * @export
 * @interface MfaApiInterface
 */
export interface MfaApiInterface {
    /**
     * 
     * @param {MFARequest} mFARequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MfaApiInterface
     */
    mfaRaw(requestParameters: MfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     */
    mfa(mFARequest: MFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

}

/**
 * 
 */
export class MfaApi extends runtime.BaseAPI implements MfaApiInterface {

    /**
     */
    async mfaRaw(requestParameters: MfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['mFARequest'] == null) {
            throw new runtime.RequiredError(
                'mFARequest',
                'Required parameter "mFARequest" was null or undefined when calling mfa().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/mfa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MFARequestToJSON(requestParameters['mFARequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     */
    async mfa(mFARequest: MFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.mfaRaw({ mFARequest: mFARequest }, initOverrides);
        return await response.value();
    }

}
